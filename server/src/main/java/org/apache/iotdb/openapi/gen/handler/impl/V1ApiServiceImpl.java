/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// this file is generated by openapi generator

package org.apache.iotdb.openapi.gen.handler.impl;

import org.apache.iotdb.db.auth.AuthException;
import org.apache.iotdb.db.auth.AuthorityChecker;
import org.apache.iotdb.db.conf.IoTDBDescriptor;
import org.apache.iotdb.db.exception.StorageEngineException;

import org.apache.iotdb.db.exception.metadata.MetadataException;
import org.apache.iotdb.db.exception.metadata.StorageGroupNotSetException;
import org.apache.iotdb.db.exception.query.QueryProcessException;

import org.apache.iotdb.db.qp.Planner;
import org.apache.iotdb.db.qp.executor.PlanExecutor;
import org.apache.iotdb.db.qp.physical.PhysicalPlan;
import org.apache.iotdb.db.qp.physical.crud.GroupByTimePlan;

import org.apache.iotdb.db.qp.physical.crud.QueryPlan;
import org.apache.iotdb.db.query.context.QueryContext;
import org.apache.iotdb.db.query.control.QueryResourceManager;

import org.apache.iotdb.db.query.executor.QueryRouter;
import org.apache.iotdb.openapi.gen.handler.NotFoundException;
import org.apache.iotdb.openapi.gen.handler.V1ApiService;

import org.apache.iotdb.openapi.gen.model.ReadData;
import org.apache.iotdb.openapi.gen.model.WriteData;
import org.apache.iotdb.tsfile.exception.filter.QueryFilterOptimizationException;

import org.apache.iotdb.tsfile.read.common.Path;
import org.apache.iotdb.tsfile.read.common.RowRecord;
import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;

import com.google.common.base.Joiner;

import com.google.gson.Gson;


import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

import java.util.List;
import java.util.Map;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen",
    date = "2021-01-13T21:45:03.765+08:00[Asia/Shanghai]")
public class V1ApiServiceImpl extends V1ApiService {
  private static final long MS_TO_MONTH = 30 * 86400_000L;
  private ConcurrentHashMap<String, ConcurrentHashMap> bigmap =
      new ConcurrentHashMap<String, ConcurrentHashMap>();
  private AtomicInteger lableTime = new AtomicInteger(0);
  private int sgcount = 5;
  private String timestampPrecision = "ms";
  private float timePrecision = 1; // the timestamp Precision is default ms
  private String NOPERMSSION = "No permissions for this operation ";

  public V1ApiServiceImpl() {
    sgcount = IoTDBDescriptor.getInstance().getConfig().getSgCount();
    timestampPrecision = IoTDBDescriptor.getInstance().getConfig().getTimestampPrecision();
    if (timestampPrecision.equals("ns")) {
      timePrecision = timePrecision * 1000000;
    } else if (timestampPrecision.equals("us")) {
      timePrecision = timePrecision * 1000;
    } else if (timestampPrecision.equals("s")) {
      timePrecision = timePrecision / 1000;
    }
  }

  private int getFetchSizeForGroupByTimePlan(GroupByTimePlan groupByTimePlan) {
    int rows =
        (int)
            ((groupByTimePlan.getEndTime() - groupByTimePlan.getStartTime())
                / groupByTimePlan.getInterval());
    // rows gets 0 is caused by: the end time - the start time < the time interval.
    if (rows == 0 && groupByTimePlan.isIntervalByMonth()) {
      Calendar calendar = Calendar.getInstance();
      calendar.setTimeInMillis(groupByTimePlan.getStartTime());
      calendar.add(Calendar.MONTH, (int) (groupByTimePlan.getInterval() / MS_TO_MONTH));
      rows = calendar.getTimeInMillis() <= groupByTimePlan.getEndTime() ? 1 : 0;
    }
    return rows;
  }

  @Override
  public Response postV1NonQuery(ReadData readData, SecurityContext securityContext)
      throws NotFoundException {
    boolean b = false;
    try {
      Planner planner = new Planner();
      PhysicalPlan physicalPlan = planner.parseSQLToPhysicalPlan(readData.getSql());
      PlanExecutor executor = new PlanExecutor();
      b = executor.processNonQuery(physicalPlan);

    } catch (QueryProcessException e) {
      e.printStackTrace();
    } catch (MetadataException e) {
      e.printStackTrace();
    } catch (StorageEngineException e) {
      e.printStackTrace();
    }
    Gson result = new Gson();
    String restr = "execute fail";
    if (b) {
      restr = "execute sucessfully";
    }
    return Response.ok().entity(result.toJson(restr)).build();
  }

  private QueryDataSet getDataBySelect(SecurityContext securityContext, PhysicalPlan physicalPlan) {
    try {
      PlanExecutor executor = new PlanExecutor();
      int fetchSize = 10000;
      if (physicalPlan instanceof GroupByTimePlan) {
        fetchSize =
            Math.min(getFetchSizeForGroupByTimePlan((GroupByTimePlan) physicalPlan), fetchSize);
      }
      QueryRouter qr = new QueryRouter();
      Long quertId = QueryResourceManager.getInstance().assignQueryId(true, fetchSize, -1);
      QueryContext context = new QueryContext(quertId);
      return executor.processQuery(physicalPlan, context);

    } catch (QueryProcessException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (QueryFilterOptimizationException e) {
      e.printStackTrace();
    } catch (InterruptedException e) {
      e.printStackTrace();
    } catch (MetadataException e) {
      e.printStackTrace();
    } catch (StorageEngineException e) {
      e.printStackTrace();
    }
    return null;
  }
  @Override
  public Response postV1RestDataRead(ReadData readData, SecurityContext securityContext)
      throws NotFoundException {
    Gson result = new Gson();
    Map timemap = new HashMap();
    List<Map> listtemp = new ArrayList<>();
    try {
      Planner planner = new Planner();
      PhysicalPlan physicalPlan = planner.parseSQLToPhysicalPlan(readData.getSql());
      if(!(physicalPlan instanceof QueryPlan)){
        return Response.ok()
            .entity("only support for this operation select" )
            .build();
      }
      if (!AuthorityChecker.check(
          securityContext.getUserPrincipal().getName(),
          physicalPlan.getPaths(),
          physicalPlan.getOperatorType(),
          null)) {
        return Response.ok()
            .entity("No permissions for this operation " + physicalPlan.getOperatorType())
            .build();
      }
      QueryDataSet dataSet = getDataBySelect(securityContext, physicalPlan);
      Map<String, Object> tmpmap = new HashMap<String, Object>();
      List<Object> temlist = new ArrayList<Object>();
      List<Path> listpaths = dataSet.getPaths();

      timemap.put("name", "Time");
      timemap.put("type", "INT64");
      timemap.put("values", temlist);
      listtemp.add(timemap);
      for (Path pathResult : listpaths) {
        Map m = new HashMap();
        String fullname = pathResult.getFullPath();
        m.put("name", fullname);
        listtemp.add(m);
      }
      while (dataSet.hasNext()) {
        RowRecord rowRecord = dataSet.next();
        temlist.add(rowRecord.getTimestamp());
        List<org.apache.iotdb.tsfile.read.common.Field> fields = rowRecord.getFields();
        for (int i = 1; i < listtemp.size(); i++) {
          List listvalues = null;
          if (listtemp.get(i).get("values") != null) {
            listvalues = (List) listtemp.get(i).get("values");
          } else {
            listvalues = new ArrayList<>();
          }
          if (fields.get(i - 1) == null || fields.get(i - 1).getDataType() == null) {
            listvalues.add(null);
          } else {
            listvalues.add(fields.get(i - 1).getObjectValue(fields.get(i - 1).getDataType()));
            listtemp.get(i).put("values", listvalues);
          }
          if (listtemp.get(i).get("type") == null) {
            listtemp.get(i).put("type", "");
          } else if (listtemp.get(i).get("type").toString().length() == 0
              && fields.get(i - 1) != null
              && fields.get(i - 1).getDataType() != null) {
            listtemp.get(i).put("type", fields.get(i - 1).getDataType());
          }
        }
      }
    } catch (QueryProcessException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    } catch (AuthException e) {
      e.printStackTrace();
    }
    return Response.ok().entity(result.toJson(listtemp)).build();
  }

  @Override
  public Response postV1RestDataWrite(WriteData writeData, SecurityContext securityContext)
      throws NotFoundException {
    Map resultMap = new HashMap<String, Object>();
    List<String> listParam = writeData.getParams();
    List<String> listValues = writeData.getValues();
    List<String> pathList = writeData.getPaths();
    StringBuilder sql = new StringBuilder();
    String path = Joiner.on(".").join(pathList);
    String s = Joiner.on(",").join(listValues);
    String param = Joiner.on(",").join(listParam);
    sql.append("insert into ")
        .append(path)
        .append("(")
        .append(param)
        .append(") values (")
        .append(s)
        .append(")");
    String resultValue = insertDb(securityContext, sql.toString());
    if (resultValue.equals("success")) {
      resultMap.put("code", 200);
      resultMap.put("message", "write data success");
    } else if (resultValue.equals("fail")) {
      resultMap.put("code", 500);
      resultMap.put("message", "write data failed");
    } else {
      resultMap.put("code", 401);
      resultMap.put("message", resultValue);
    }
    Gson result = new Gson();
    return Response.ok().entity(result.toJson(resultMap)).build();
  }

  public String insertDb(SecurityContext securityContext, String sql) {
    String result = "fail";
    try {
      Planner planner = new Planner();
      PlanExecutor executor = new PlanExecutor();
      PhysicalPlan physicalPlan = planner.parseSQLToPhysicalPlan(sql);
      if (!AuthorityChecker.check(
          securityContext.getUserPrincipal().getName(),
          physicalPlan.getPaths(),
          physicalPlan.getOperatorType(),
          null)) {
        return NOPERMSSION + physicalPlan.getOperatorType();
      }
      boolean b = executor.processNonQuery(physicalPlan);
      if (b) {
        result = "success";
      }
    } catch (QueryProcessException e) {
      e.printStackTrace();
    } catch (AuthException e) {
      e.printStackTrace();
    } catch (StorageGroupNotSetException e) {
      e.printStackTrace();
    } catch (StorageEngineException e) {
      e.printStackTrace();
    }
    return result;
  }
}
